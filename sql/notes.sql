/*Запросы:
	
	1.Работа со структурой:
	1.1. Создание таблиц - 		CREATE TABLE / CREATE DATABASE / CREATE SCHEMA 
	1.2. Изменение структуры - 	ALTER TABLE
	1.3. Удаление таблицы - 	DROP TABLE / DROP DATABASE / DROP SCHEMA
	1.4. ВЫбрать текущую БД -	USE
	
	2.CRUD (CREATE READ UPDATE DELETE)
	2.1. Выборка данных - 		SELECT - READ
	2.2. Обновление данных - 	UPDATE - UPDATE
	2.3. Добавление данных - 	INSERT - CREATE
	2.4. Удаление данных - 		DELETE - DELETE
	
	1.1 CREATE TABLE наименование
		(
			колонка1 тип_данных ОЦ,
			колонка2 тип_данных ОЦ,
			колонка3 тип_данных ОЦ,
			колонка4 тип_данных ОЦ,
		);
		
		CREATE TABLE Shop
		(
			id int PRIMARY KEY AUTO_INCREMENT,
			`name` varchar(200) NOT NULL,
			`description` TEXT,
			count int DEFAULT 0,
			price DOUBLE(6,2) CHECK(price> 100.00)
		);
		
	1.2 ALTER TABLE наименование
		ADD колонка1 тип_данных ОЦ; 		-- Добавление столбца
		
		ALTER TABLE наименование
		MODIFY колонка1 тип_данных ОЦ;		-- Изменение столбца
		
		ALTER TABLE наименование
		DROP колонка1;						-- Удаление Столбца
		
		ALTER TABLE наименование RENAME TO новое_наименование;  -- изменение наименования;
		
	1.3 DROP TABLE наименование;			-- Удаление таблицы
	
	1.4 USE наименование_бд;
	
	2. Запросы группы CRUD
	
	2.1 SELECT
	
	SELECT	*						FROM наименование_таблицы; - выборка всех колонок
	SELECT колонка1, ..., колонкаN	FROM наименование_таблицы; - выборка нескольких колонок
	SELECT ФУНКЦИЯ(колонка1)		FROM наименование_таблицы; - выборка данных с обработкой используя определенную функцию
	
	SELECT * FROM  наименование_таблицы ORDER BY колонка1 DESC; - сортировка выборки по убыванию
	SELECT * FROM  наименование_таблицы ORDER BY колонка1 ASC;  - сортировка выборки по возрастанию
	
	SELECT * FROM  наименование_таблицы GROUP BY колонка1; 					- группировка выборки по значениям определенной колонки
	SELECT ФУНКЦИЯ(колонка1) FROM  наименование_таблицы GROUP BY колонка1; 	- группировка выборки по значениям определенной колонки, 
																			  а так же работа с функциями для группы данных
	SELECT DISTINCT колонка1 FROM  наименование_таблицы;					- вывод выборки без дублей полей колонки1
	SELECT * FROM  наименование_таблицы GROUP BY колонка1 HAVING условие; 	- аналог WHERE только для выборки с группировкой данных
	
	
	Alias(Синоним / псевдоним)
	1. SELECT колонка1 AS новое_наименование FROM наименование_таблицы; -- псевдоним для колонки
	2. SELECT * FROM наименование_таблицы AS новое_наименование; -- псевдоним для наименование_таблицы
	3. (SELECT * FROM наименование_таблицы) AS виртуальная_таблица; -- использование виртуальной таблицы
	3ПРИМЕР:
		UPDATE `newitems` set price=(select * from (SELECT MAX(price) from `newitems`) as tt)*0.5;
													подзапрос выборки для той же таблицы
									------ использование виртуальной таблицы ---------------
		
	2.2 INSERT
	
	INSERT INTO наименование_таблицы VALUES(значение1, ..., значениеN) -- Добавление данных в таблицу по структуре самой таблицы.
	INSERT INTO наименование_таблицы(колонка1, ..., колонка) VALUES(значение1, ..., значениеN) -- Добавление данных в таблицу по описанной структуре.
														     VALUES(DEFAULT,   ..., значениеN) -- Данное поле при внесении будет использовать значение по умолчанию
	
	2.3 UPDATE
	
	UPDATE наименование_таблицы SET колонка1=значение1, ..., колонкаN=значениеN;
	UPDATE наименование_таблицы SET колонка1=подзапрос, ..., колонкаN=значениеN;
	
	UPDATE наименование_таблицы SET колонка1=CASE		- запрос на обновление данных в зависимости от выполнения условия
	WHEN условие
	THEN значение1										- значение1 в случаи если условие ИСТИНА
	ELSE значение2										- значение2 в случаи если условие ЛОЖЬ	
	END;
	
	2.4 DELETE
	
	DELETE FROM наименование_таблицы;
	
	ДЛЯ RUD:
	
	SELECT * FROM наименование_таблицы						\
	UPDATE наименование_таблицы SET  колонка1=значение1		--> WHERE условие; - условие для выборки данных
	DELETE FROM наименование_таблицы						/
	
	Условия:
	Некое выражение которое вернет нам ИСТИНУ(TRUE) или ЛОЖЬ(FALSE);
	Булевое значение - значение которое ПРИНИМАЕТ или ИСТИНУ(TRUE) или ЛОЖЬ(FALSE);
	
	* Логические операторы(AND, OR, NOT, XOR) - Работают с булевыми значениями и в результате возвращают булевое значение
	* Операторы сравнения - Работаем с каким-либо типом данных(целочисленные, числа с точкой, время, дату, время и дату, текстовые) 
							и в результате возвращает булево значение
	* Функция - Некая функция которая принимает один или несколько параметров и на выходе мы можем получить значение определенного типа
			EXISTS(подзапрос) - Если запрос имеет хотя бы одну запись, то вернет ИСТИНУ иначе ЛОЖЬ
			значение IN (значение1, ..., значениеN) - Вернет ИСТИНУ, если значение совпадает с одним из перечисленных в списке значений
			значение_для_сравнения BETWEEN a AND b - Вернет ИСТИНУ, если значение входит в промежуток от a до b;  a <= значение <= b;
			значение LIKE 'шаблон' - верннет ИСТИНУ, если значение совпадает по шаблону
			значение IS NULL - вернет ИСТИНУ если значение пустое
			значение IS NOT NULL - вернет ИСТИНУ если значение не пустоеы
			
			функции для группированных данных (так же можно использовать на обычной	выборке):
			MIN(колонка1)	- вернет минимальное значение
			MAX(колонка1)	- вернет максимальное значение
			AVG(колонка1)	- вернет среднее значение
			SUM(колонка1)	- вернет сумму значений данной колонки
			COUNT(колонка1)	- вернет кол-во значений
			COUNT(*)		- вернет кол-во значений
*/			
		